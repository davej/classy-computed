// Generated by CoffeeScript 1.7.1
angular.module('classy-computed', ['classy-core']).classy.plugin.controller({
  name: 'computed',
  options: {
    enabled: true
  },
  isActive: function(klass, deps) {
    if (this.options.enabled && angular.isObject(klass.computed)) {
      if (!deps.$scope) {
        throw new Error("You need to inject `$scope` to use computed properties");
        return false;
      }
      return true;
    }
  },
  postInit: function(klass, deps, module) {
    var computeUsing, prop, _ref, _results;
    if (!this.isActive(klass, deps)) {
      return;
    }
    _ref = klass.computed;
    _results = [];
    for (prop in _ref) {
      computeUsing = _ref[prop];
      if (typeof computeUsing === 'function') {
        _results.push(this.registerGet(prop, computeUsing, klass, deps));
      } else if (typeof computeUsing === 'object') {
        _results.push(this.registerAdvanced(prop, computeUsing, klass, deps));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  },
  registerGet: function(prop, getFn, klass, deps) {
    deps.$scope[prop] = angular.bind(klass, getFn)();
    return deps.$scope.$watch(angular.bind(klass, getFn), function(newVal, oldVal) {
      if (oldVal !== newVal) {
        return deps.$scope[prop] = newVal;
      }
    });
  },
  registerGetWithWatch: function(prop, obj, klass, deps) {
    var watch;
    watch = "[" + (obj.watch.toString()) + "]";
    deps.$scope[prop] = angular.bind(klass, obj.get)();
    return deps.$scope.$watchCollection(watch, function(newVal, oldVal) {
      return deps.$scope[prop] = angular.bind(klass, obj.get)();
    });
  },
  registerSet: function(prop, setFn, klass, deps) {
    return deps.$scope.$watch(prop, angular.bind(klass, setFn));
  },
  registerAdvanced: function(prop, obj, klass, deps) {
    if (typeof obj.get === 'function') {
      if (obj.watch) {
        this.registerGetWithWatch(prop, obj, klass, deps);
      } else {
        this.registerGet(prop, obj.get, klass, deps);
      }
    }
    if (typeof obj.set === 'function') {
      return this.registerSet(prop, obj.set, klass, deps);
    }
  }
});
